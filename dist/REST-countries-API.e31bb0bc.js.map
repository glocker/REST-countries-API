{"version":3,"sources":["utils.js","index.js"],"names":["detectDeviceType","test","navigator","userAgent","emptyCardsList","element","firstElementChild","remove","filter","document","getElementById","addEventListener","dropDownToggle","classList","toggle","darkModeToggle","body","main","contains","add","window","cardsList","cardTemplate","requestURL","showAllCountries","fetch","method","then","response","json","data","renderCard","forEach","country","countryTitle","name","common","countryFlag","flags","svg","clone","content","cloneNode","cardBody","id","cardTitle","textContent","cardImage","src","cardText","innerHTML","population","toLocaleString","region","capital","appendChild","input","e","value","target","trim","length","regionName","sortingByRegion","console","log","item","catch","error","cardOpener","countryName","open"],"mappings":";;ACAA;AAEA;AACAoB,MAAM,CAACR,cAAc,GAAGA,qBAAc;AACtCQ,MAAM,CAACL,cAAc,GAAGA,qBAAc;AAEtC,IAAAf,uBAAgB,GAAE;AAElB,IAAMqB,SAAS,GAAGZ,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC;AACvD,IAAMY,YAAY,GAAGb,QAAQ,CAACC,cAAc,CAAC,eAAe,CAAC;AAE7D,ADXA,ICWMa,UAAU,GAAG,iCAAiC;AAEpD,ADZA,IAAMvB,KCYGwB,WDZa,GAAG,ECYA,GAAG,IDZtBxB,gBAAgB;ECalByB,ADbkB,KCab,CAACF,CDZN,SCYgB,GAAG,KAAK,EAAE,6CDZsC,CAACtB,IAAI,CACjEC,SAAS,CAACC,SAAS,CACtB,GACK,QAAQ,GACR,SAAS;AAAA,ICQYuB,MAAM,EAAE;EAAK,CAAC,CAAC,CACrCC,IAAI,CAAC,UAAAC,QAAQ;ADPtB,ICOsB,OAAIA,QAAQ,CAACC,IAAI,EAAE,CAC5BF,IAAI,CAAC,UAAAG,IAAI,EAAI;ADR1B,MCSgBC,UAAU,CAACD,IAAI,CAAC;ADRhC,ICSY,CAAC,CAAC,GDTL1B,cAAc,CAACC,OAAO,EAAE;ECSnB,ADRV,ECSK,KDTCA,OAAO,CAACC,iBAAiB,EAAE;ACUrC,IDTQD,OAAO,CAACC,iBAAiB,CAACC,MAAM,EAAE;ACW1CiB,EDVI,cCUY,EAAE;AAElB,ADXA,SCWSO,UAAU,CAAED,IAAI,EAAE;EACvBA,IAAI,CAACE,OAAO,CAAC,UAACC,OAAO,EAAK;ADV9B,ICYQ;ADXR,ICYQ,ADZFzB,ICYQ0B,EDZF,GAAGzB,OCYW,CDZH,CAACC,CCYKuB,OAAO,CAACE,IAAI,CAACC,ADZJ,CAAC,KCYS,aDZS,CAAC;AAC1D5B,ICYQ,EDZF,CAACG,CCYO0B,WAAW,GAAGJ,CDZL,CAAC,KCYW,CAACK,CDZL,EAAE1B,ECYQ,CAAC2B,GAAG,QDZE,EAAE,KAAK,CAAC;AAEvD,ICYQ,IAAMC,CDZL5B,ICYU,GAAGU,ODZC,GAAG,ECYQ,CAACmB,OAAO,CAACC,SAAS,CAAC,IAAI,CAAC;EDXtDlC,MAAM,CAACK,SAAS,CAACC,MAAM,CAAC,MAAM,CAAC;AACnC,ICYQ;IACA,IAAM6B,QAAQ,GAAGH,KAAK,CAAC9B,cAAc,CAAC,WAAW,CAAC;ADX1D,ICYQiC,QAAQ,CAACC,EAAE,GAAGV,YAAY;ADXlC,ICaQ,IAAMW,CDbL9B,QCac,GAAGyB,GDbH,ECaQ,CAAC9B,ADbN,cCaoB,CAAC,YAAY,CAAC;EDZxD,ECaImC,EDbE7B,IAAI,GCaG,ADbAP,CCaCqC,ODbO,CAACpC,GCaG,GAAGwB,QDbQ,CAAC,GCaG,GDbG,CAAC;EAC5C,ECcI,EDdEjB,ECcI8B,EDdA,GAAGtC,ICcM,GAAG+B,CDdD,CAAC9B,GCcK,CAACA,UDdQ,CAAC,GCcK,CAAC,EDdA,CAAC,SCcW,CAAC;EDZxD,ECaIqC,EDbA/B,IAAI,CAACH,ECaI,CAACmC,GAAG,GAAGX,ADbF,CAACnB,QAAQ,CAAC,CCaG,KDbG,CAAC,IAAID,IAAI,CAACJ,SAAS,CAACK,QAAQ,CAAC,MAAM,CAAC,EAAE;ICepE,ADdAF,ICcMiC,ADdF,CAACpC,OCcS,EDdA,CCcG2B,ADdFjC,KCcO,CAACG,ADdF,CAAC,MAAM,CAAC,MCcQ,CAAC,WAAW,CAAC;IAClDuC,ADdAhC,IAAI,CAACJ,GCcG,CAACqC,KDdK,CAAC3C,GCcG,GAAG,ADdA,CAAC,MAAM,CAAC,SCcS,GAAG0B,OAAO,CAACkB,UAAU,CAACC,cAAc,CAAC,IAAI,CAAC,GAAG,MAAM,GAAG,aAAa,GAAGnB,OAAO,CAACoB,MAAM,GAAG,MAAM,GAAG,cAAc,GAAGpB,OAAO,CAACqB,OAAO,IAAIrB,OAAO,CAACqB,OAAO,CAAC,CAAC,CAAC,GAAG,MAAM;EDbzM,CAAC,MAAM;ICeH,ADdAtC,IAAI,CAACH,SAAS,CAACM,GAAG,CAAC,MAAM,CAAC;ICe1BE,ADdAJ,IAAI,CAACJ,ICcI,CAAC0C,IDdI,CAACpC,GAAG,CAAC,ECcE,CAACqB,GDdG,CAAC,CCcC,CAAC;EAChC,ADdA,CCcC,CAAC;AACN,ADdA;ACgBA,IAAMgB,KAAK,GAAG/C,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC;AAEnD8C,KAAK,CAAC7C,gBAAgB,CAAC,OAAO,EAAE,UAAC8C,CAAC,EAAK;EAEnC;EACA,IAAIC,KAAK,GAAGD,CAAC,CAACE,MAAM,CAACD,KAAK;;EAE1B;EACA,IAAAtD,qBAAc,EAACiB,SAAS,CAAC;EAEzB,IAAIqC,KAAK,IAAIA,KAAK,CAACE,IAAI,EAAE,CAACC,MAAM,IAAI,CAAC,EAAE;IAEnCH,KAAK,GAAGA,KAAK,CAACE,IAAI,EAAE;;IAEpB;IACAnC,KAAK,CAACF,UAAU,GAAG,OAAO,GAAGmC,KAAK,EAAE;MAAChC,MAAM,EAAE;IAAK,CAAC,CAAC,CAC/CC,IAAI,CAAC,UAAAC,QAAQ;MAAA,OAAIA,QAAQ,CAACC,IAAI,EAAE,CAC5BF,IAAI,CAAC,UAAAG,IAAI,EAAI;QACVC,UAAU,CAACD,IAAI,CAAC;MACpB,CAAC,CAAC;IAAA,EACL;EACT;;EAEA;EACA,IAAI,CAAC4B,KAAK,EAAE;IACRlC,gBAAgB,EAAE;EACtB;AACJ,CAAC,CAAC;;AAEF;;AAEA,IAAMsC,UAAU,GAAGrD,QAAQ,CAACC,cAAc,CAAC,uBAAuB,CAAC;AACnE;;AAEA,IAAM2C,MAAM,GAAG;EAAClB,IAAI,EAAE;AAAQ,CAAC;AAG/B,SAAS4B,eAAe,CAACV,MAAM,EAAE;EAC7B,OAAO5B,KAAK,CAACF,UAAU,CAAC,CACnBI,IAAI,CAAC,UAAAC,QAAQ;IAAA,OAAIA,QAAQ,CAACC,IAAI,EAAE;EAAA,EAAC,CACjCF,IAAI,CAAC,UAAAE,IAAI;IAAA,OAAImC,OAAO,CAACC,GAAG,CAACpC,IAAI,CAACrB,MAAM,CAAC,UAAA0D,IAAI;MAAA,OAAIA,IAAI,CAACb,MAAM,IAAIA,MAAM;IAAA,EAAC,CAAC;EAAA,EAAC,CACrEc,KAAK,CAAC,UAAAC,KAAK;IAAA,OAAIJ,OAAO,CAACC,GAAG,CAACG,KAAK,CAAC;EAAA,EAAC;AAC3C;;AAEA;;AAEAhD,MAAM,CAACiD,UAAU,GAAGA,UAAU;AAC9B,SAASA,UAAU,CAACC,WAAW,EAAE;EAC7BN,OAAO,CAACC,GAAG,CAACK,WAAW,CAAC;;EAExB;EACAlD,MAAM,CAACmD,IAAI,+CAAwCD,WAAW,GAAI,QAAQ,CAAC;AAC/E","file":"REST-countries-API.e31bb0bc.js","sourceRoot":"..","sourcesContent":["// Check device type: mobile or desktop\nconst detectDeviceType = () =>\n    /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\n        navigator.userAgent\n    )\n        ? \"Mobile\"\n        : \"Desktop\";\n\n// Recursively clear DOM\nfunction emptyCardsList(element) {\n    while(element.firstElementChild) {\n        element.firstElementChild.remove();\n    }\n}\n\n// Dropdown menu\nconst filter = document.getElementById(\"dropdown-content\");\nfilter.addEventListener('click', dropDownToggle, false);\n\nfunction dropDownToggle() {\n    filter.classList.toggle(\"show\");\n}\n\n// Dark mode\nfunction darkModeToggle() {\n    const body = document.getElementById('body');\n    const main = document.getElementById('main');\n\n    if (body.classList.contains('dark') && main.classList.contains('dark')) {\n        body.classList.remove('dark');\n        main.classList.remove('dark');\n    } else {\n        body.classList.add('dark');\n        main.classList.add('dark');\n    }\n}\n\nexport { detectDeviceType, emptyCardsList, dropDownToggle, darkModeToggle };\n","import {detectDeviceType, emptyCardsList, dropDownToggle, darkModeToggle} from './utils.js';\n\n// Do it because I use es6 modules\nwindow.dropDownToggle = dropDownToggle;\nwindow.darkModeToggle = darkModeToggle;\n\ndetectDeviceType();\n\nconst cardsList = document.getElementById('cards-list');\nconst cardTemplate = document.getElementById('card-template');\n\nconst requestURL = 'https://restcountries.com/v3.1/';\n\nfunction showAllCountries() {\n    fetch(requestURL + 'all', {method: 'GET'})\n        .then(response => response.json()\n            .then(data => {\n                renderCard(data);\n            })\n        )\n}\n\nshowAllCountries();\n\nfunction renderCard (data) {\n    data.forEach((country) => {\n\n        // Get data from API\n        const countryTitle = country.name.common;\n        const countryFlag = country.flags.svg;\n\n        const clone = cardTemplate.content.cloneNode(true);\n\n        // Rewrite card id from card-body to unique country name\n        const cardBody = clone.getElementById('card-body');\n        cardBody.id = countryTitle;\n\n        const cardTitle = clone.getElementById('card-title');\n        cardTitle.textContent = countryTitle;\n\n        const cardImage = clone.getElementById('card-image');\n        cardImage.src = countryFlag;\n\n        const cardText = clone.getElementById('card-text');\n        cardText.innerHTML = \"<p>Population: \" + country.population.toLocaleString('en') + \"</p>\" + \"<p>Region: \" + country.region + \"</p>\" + \"<p>Capital: \" + country.capital || country.capital[0] + \"</p>\"\n\n        // Insert card with data in DOM\n        cardsList.appendChild(clone);\n    })\n}\n\nconst input = document.getElementById('search-bar');\n\ninput.addEventListener('input', (e) => {\n\n    // Grab data from input field\n    let value = e.target.value;\n\n    // Remove default countries selection\n    emptyCardsList(cardsList);\n\n    if (value && value.trim().length >= 3) {\n\n        value = value.trim();\n\n        // Get data for searchable countries\n        fetch(requestURL + 'name/' + value, {method: 'GET'})\n            .then(response => response.json()\n                .then(data => {\n                    renderCard(data);\n                })\n            )\n    }\n\n    // In case search bar is empty we show all countries by default\n    if (!value) {\n        showAllCountries();\n    }\n})\n\n// Filter by Regions\n\nconst regionName = document.getElementById('dropdown-content-item')\n//regionName.addEventListener('click', event => sortingByRegion())\n\nconst region = {name: 'France'}\n\n\nfunction sortingByRegion(region) {\n    return fetch(requestURL)\n        .then(response => response.json())\n        .then(json => console.log(json.filter(item => item.region == region)))\n        .catch(error => console.log(error))\n}\n\n//sortingByRegion('Asia')\n\nwindow.cardOpener = cardOpener;\nfunction cardOpener(countryName) {\n    console.log(countryName);\n\n    //window.location.href = './countryPage/countryPage.html'\n    window.open(`./countryPage/countryPage.html?name=${countryName}`, \"_blank\");\n}\n\n\n\n\n\n\n\n\n\n\n\n\n"]}